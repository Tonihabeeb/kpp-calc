[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "kpp-simulator"
version = "1.0.0"
description = "Kinetic Pneumatic Power (KPP) Simulator - Advanced multi-physics energy system simulation"
authors = [
    {name = "KPP Development Team", email = "dev@kpp-simulator.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["simulation", "physics", "energy", "pneumatic", "power-generation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Simulation",
]

# Runtime dependencies only
dependencies = [
    "flask>=2.3.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scipy>=1.10.0",
    "matplotlib>=3.7.0",
    "requests>=2.31.0",
    "pydantic>=2.0.0",
    "sseclient-py>=1.8.0",
    "python-dateutil>=2.8.0",
]

# Optional dependencies for enhanced features
[project.optional-dependencies]
advanced = [
    "numba>=0.57.0",
    "plotly>=5.15.0",
    "dash>=2.10.0",
]

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "mypy>=1.5.0",
    "pylint>=2.17.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
    "coverage>=7.3.0",
    "hypothesis>=6.82.0",
    "flake8>=6.0.0",
    "bandit>=1.7.5",
]

testing = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.82.0",
    "factory-boy>=3.3.0",
    "responses>=0.23.0",
]

docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.urls]
"Homepage" = "https://github.com/kpp-dev/kpp-simulator"
"Bug Reports" = "https://github.com/kpp-dev/kpp-simulator/issues"
"Source" = "https://github.com/kpp-dev/kpp-simulator"
"Documentation" = "https://kpp-simulator.readthedocs.io/"

[project.scripts]
kpp-simulator = "app:main"
kpp-validate = "smoke_test:main"

# Tool configurations
[tool.setuptools.packages.find]
where = ["."]
include = ["simulation*", "routes*", "config*", "static*", "templates*"]
exclude = ["tests*", "logs*", ".venv*", "__pycache__*"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | logs
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["simulation", "routes", "config"]
known_third_party = ["numpy", "pandas", "flask", "scipy", "matplotlib", "pydantic"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, tighten later
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true  # For NumPy, SciPy C extensions
strict_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pylint.messages_control]
disable = [
    "too-many-arguments",
    "too-many-locals", 
    "too-many-instance-attributes",
    "too-few-public-methods",
    "import-error",  # Handled by mypy
    "missing-docstring",  # Start lenient
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 8
max-branches = 15
max-statements = 60

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "physics: marks tests that validate physics calculations",
    "api: marks tests for Flask API endpoints",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["simulation", "routes", "config", "app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    "setup.py",
    "*/logs/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
