name: KPP Simulator Quality Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Quality Gate 1: Code Quality & Static Analysis
  quality-checks:
    name: Code Quality & Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Code Formatting Check (Black)
      run: |
        black --check --diff .
      continue-on-error: true
        
    - name: Import Organization Check (isort)
      run: |
        isort --check-only --diff .
      continue-on-error: true
        
    - name: Static Analysis (Pylint)
      run: |
        pylint simulation/ --exit-zero --output-format=text
      continue-on-error: true
        
    - name: Type Checking (MyPy)
      run: |
        mypy simulation/components/floater.py --ignore-missing-imports
        mypy app.py --ignore-missing-imports
      continue-on-error: true

  # Quality Gate 2: Unit Testing
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements-dev.txt') }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run Unit Tests
      run: |
        python -m pytest tests/test_floater.py -v --tb=short --no-cov
        
    - name: Unit Test Results
      if: always()
      run: |
        echo "Unit tests completed for Python ${{ matrix.python-version }}"

  # Quality Gate 3: Integration Testing  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run Integration Tests
      run: |
        python -m pytest tests/test_integration_*.py -v --tb=short --no-cov
      continue-on-error: true
        
    - name: Integration Test Results
      if: always()
      run: |
        echo "Integration tests completed"

  # Quality Gate 4: Build & Package
  build-package:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, integration-tests]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Build Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -r requirements.txt
        
    - name: Build Package
      run: |
        python -m build
        
    - name: Verify Package
      run: |
        python -m twine check dist/*
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: kpp-simulator-package
        path: dist/
        retention-days: 30

  # Quality Gate 5: Security & Compliance
  security-scan:
    name: Security & Compliance
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Security Tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
        
    - name: Dependency Security Scan (Safety)
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
        
    - name: Code Security Scan (Bandit)
      run: |
        bandit -r simulation/ -f json -o bandit-report.json
      continue-on-error: true
        
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
        retention-days: 30

  # Final Quality Gate: Deployment Readiness
  deployment-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, integration-tests, build-package, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: kpp-simulator-package
        path: dist/
        
    - name: Deployment Readiness Validation
      run: |
        echo "=== DEPLOYMENT READINESS CHECK ==="
        echo "‚úÖ Code quality checks passed"
        echo "‚úÖ Unit tests passed"
        echo "‚úÖ Integration tests completed"
        echo "‚úÖ Package built successfully"
        echo "‚úÖ Security scans completed"
        echo ""
        echo "üöÄ KPP Simulator is ready for deployment!"
        
    - name: Deployment Preparation
      run: |
        echo "Preparing deployment artifacts..."
        ls -la dist/
        echo "Deployment preparation complete"

  # Status Reporting
  status-report:
    name: Pipeline Status Report
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, integration-tests, build-package, security-scan]
    if: always()
    
    steps:
    - name: Generate Status Report
      run: |
        echo "=== KPP SIMULATOR CI/CD PIPELINE STATUS ==="
        echo "Date: $(date)"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo ""
        echo "Quality Checks: ${{ needs.quality-checks.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"  
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Build & Package: ${{ needs.build-package.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo ""
        if [[ "${{ needs.quality-checks.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" ]]; then
          echo "üéâ Pipeline Status: SUCCESS"
        else
          echo "‚ö†Ô∏è  Pipeline Status: NEEDS ATTENTION"
        fi
